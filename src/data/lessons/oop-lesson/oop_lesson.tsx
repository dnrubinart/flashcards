const oop_data = {
  lessonTitle: "Object-Oriented Programming",
  slug: "modules-oop",
  units: [
    {
      title: "Object-Oriented Programming",
      slug: "oop",
      items: [
        {
          frontSide:
            "Какво е OOP? Какво представляват класовете, инстанциите и обектите?",
          backSide:
            "Обектно-ориентираното програмиране е програмен подход, който се базира на концепцията за обекти. Обектите са инстанции на класове, които съдържат свойства (атрибути) и поведение (методи). Позволява създаването на модулни, преизползваеми и лесно поддържаеми програми.",
        },
        {
          frontSide:
            "Как можем да създадем клас, който има определено състояние и/или поведение?",
          backSide:
            "Когато създаваме клас в Python, можем да дефинираме атрибути, които представят състоянието на обектите от този клас, както и методи, които дефинират поведението на тези обекти. Self се отнася до текущата истанция на този клас.",
        },
        {
          frontSide:
            "Сравнете атрибутите на ниво клас и атрибутите на ниво инстанция.",
          backSide:
            "Класовите атрибути са свързани със самия клас, а не с инстанциите на този клас. Те се дефинират вътре в класа, но извън методите. Класовите атрибути са общи за всички инстанции на класа и се споделят между тях. Променянето на стойността на класов атрибут ще го промени за всички инстанции на класа и за самия клас.",
        },
        {
          frontSide: "Какви са магическите методи?",
          backSide:
            "Отбелязват се с double underscore. Тези методи се извикват от класа при извършване на определени операции с обекти на класове. Позволяват контрол върху поведението на обектите.",
        },
        {
          frontSide: "Сравнете mutable и immutable обекти.",
          backSide:
            "Mutable –> променяме самия обект(пример list.append), нова стойност, същото id. Immutable –> не може да бъде променян(пример int=5, int += 1, не променя int=5, а се създава нов обект int=6) -> не променя стойността, създава нов обект с ново id.",
        },
        {
          frontSide: "Какви са ползите от използването на Type Hints?",
          backSide:
            "Предоставят информация за какъв тип данни трябва да очакваме в дадена част на програмата, което помага за по-добра документация на кода и по-лесно намиране на грешки, ако има такива, защото знаем каква стойност се очаква.",
        },
      ],
    },
  ],
};

export default oop_data;